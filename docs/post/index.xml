<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Endless River</title>
    <link>https://wangy325.top/post/</link>
    <description>Recent content in Posts on Endless River</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 27 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wangy325.top/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql事务与隔离级别</title>
      <link>https://wangy325.top/post/tech/java/mysql%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/mysql%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>&lt;p&gt;mysql事务属于老生常谈的内容了，并不指望这一篇文章将其搞透，本篇文章只是将mysql事务的外衣扒了，让其看起来不再那么神秘与华丽。有时候，新手总是对“事务”这两个字怀有莫名的恐惧感，因为其藏在mysql内部，偷偷地工作着，就好像你没有凝视深渊，而深渊却在凝视你。&lt;/p&gt;

&lt;p&gt;事务的概念可以这样理解：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在mysql中，有些操作必须要分步完成，那么我们可以把这些分步完成的操作声明为一个“事务”，用来保证mysql数据一致性。
&lt;p&gt;
    对于单条sql语句而言，mysql将其处理为一个「隐式事务」。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看起来，事务的概念还是有些空泛。事实上，有了一定的并发基础后（这也是这篇文章写在java并发之后的原因），更加容易理解事务这个概念，这并不是说事务一个并发概念，不过，事务是有了并发之后才衍生的概念，这很容易理解。试想一个只容许一个客户端连接的mysql服务，是否需要“事务”呢？答案应该是否定的。单个客户端执行sql语句总是有序的，数据一致性就能得到保证了&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。试想，如果是多客户端的系统（事实上正是如此）同时执行sql语句，就好似多线程同时访问资源一样，对于数据库系统而言，所有的数据表都是共享资源&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，那么事务就像是那把保证并发安全的锁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM垃圾回收概要(转)</title>
      <link>https://wangy325.top/post/tech/java/java-gc/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/java-gc/</guid>
      <description>&lt;h3 id=&#34;本节常见面试题&#34;&gt;本节常见面试题&lt;/h3&gt;

&lt;p&gt;问题答案在文中都有提到&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何判断对象是否死亡（两种方法）。&lt;/li&gt;
&lt;li&gt;简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。&lt;/li&gt;
&lt;li&gt;如何判断一个常量是废弃常量&lt;/li&gt;
&lt;li&gt;如何判断一个类是无用的类&lt;/li&gt;
&lt;li&gt;垃圾收集有哪些算法，各自的特点？&lt;/li&gt;
&lt;li&gt;HotSpot 为什么要分为新生代和老年代？&lt;/li&gt;
&lt;li&gt;常见的垃圾回收器有哪些？&lt;/li&gt;
&lt;li&gt;介绍一下 CMS,G1 收集器。&lt;/li&gt;
&lt;li&gt;Minor Gc 和 Full GC 有什么不同呢？&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>redis必知必会(转)</title>
      <link>https://wangy325.top/post/tech/redis-all/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/redis-all/</guid>
      <description>&lt;p&gt;此文总结了redis相关的基础性知识体系，但不包括redis主从、哨兵、集群相关内容&lt;/p&gt;

&lt;h3 id=&#34;1-简单介绍一下-redis-呗&#34;&gt;1. 简单介绍一下 Redis 呗!&lt;/h3&gt;

&lt;p&gt;简单来说 &lt;strong&gt;Redis 就是一个使用 C 语言开发的数据库&lt;/strong&gt;，不过与传统数据库不同的是 &lt;strong&gt;Redis 的数据是存在内存中的&lt;/strong&gt; ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。&lt;/p&gt;

&lt;p&gt;另外，&lt;strong&gt;Redis 除了做缓存之外，Redis 也经常用来做分布式锁，甚至是消息队列。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis 提供了多种数据类型来支持不同的业务场景。Redis 还支持事务 、持久化、Lua 脚本、多种集群方案。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>布隆过滤器(转)</title>
      <link>https://wangy325.top/post/tech/bloom-filter/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/bloom-filter/</guid>
      <description>&lt;p&gt;海量数据处理以及缓存穿透这两个场景让我认识了 布隆过滤器 ，我查阅了一些资料来了解它，但是很多现成资料并不满足我的需求，所以就决定自己总结一篇关于布隆过滤器的文章。希望通过这篇文章让更多人了解布隆过滤器，并且会实际去使用它！&lt;/p&gt;

&lt;p&gt;下面我们将分为几个方面来介绍布隆过滤器：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;什么是布隆过滤器？&lt;/li&gt;
&lt;li&gt;布隆过滤器的原理介绍。&lt;/li&gt;
&lt;li&gt;布隆过滤器使用场景。&lt;/li&gt;
&lt;li&gt;通过 Java 编程手动实现布隆过滤器。&lt;/li&gt;
&lt;li&gt;利用Google开源的Guava中自带的布隆过滤器。&lt;/li&gt;
&lt;li&gt;Redis 中的布隆过滤器。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-什么是布隆过滤器&#34;&gt;1.什么是布隆过滤器？&lt;/h3&gt;

&lt;p&gt;首先，我们需要了解布隆过滤器的概念。&lt;/p&gt;

&lt;p&gt;布隆过滤器（Bloom Filter）是一个叫做 Bloom 的老哥于1970年提出的。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的的 List、Map 、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一些重要的并发组件</title>
      <link>https://wangy325.top/post/tech/java/%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;p&gt;Java 1.5以后的并发类库新加入了一些用于解决并发问题的新构件，合理地使用这些构件能够帮助我们写出更加简单且健壮的并发程序。本节内容介绍&lt;code&gt;java.util.concurrent&lt;/code&gt;包中一些具有代表性的构件，包括&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CountDownLatch&lt;/li&gt;
&lt;li&gt;CyclicBarrier&lt;/li&gt;
&lt;li&gt;Semaphore&lt;/li&gt;
&lt;li&gt;Exchanger&lt;/li&gt;
&lt;li&gt;DelayQueue&lt;/li&gt;
&lt;li&gt;PriorityBlockingQueue&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>计划执行任务</title>
      <link>https://wangy325.top/post/tech/java/%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</guid>
      <description>&lt;p&gt;除了ThreadPoolExecutor之外，Java执行器（Executor）框架还提供了可以在指定延迟之后执行一次或周期执行任务的接口&lt;code&gt;ScheduledExecutorService&lt;/code&gt;，较&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Timer.html&#34;&gt;java.util.Timer&lt;/a&gt;而言，它是更好的选择&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发安全的集合—Java并发系列之九</title>
      <link>https://wangy325.top/post/tech/java/%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title>执行器与线程池</title>
      <link>https://wangy325.top/post/tech/java/%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;p&gt;本系列的文章到目前为止，虽然没有特别说明，但是使用执行器(Executor(s))的次数已经难以计数了，&lt;code&gt;Executors&lt;/code&gt;提供了一些非常方便的静态方法，可以根据需要创建不同的&lt;code&gt;ExecutorService&lt;/code&gt;，然后调用其&lt;code&gt;execute(Runnable)&lt;/code&gt;或&lt;code&gt;submit(Callable&amp;lt;T&amp;gt;)&lt;/code&gt;方法。在多线程的条件下，执行器还有一个非常明显的优势，它使用线程池管理线程，避免了系统创建和销毁线程的开销。在一般的Java并发过程中，也建议使用执行器完成任务而非显式地创建线程&lt;/p&gt;

&lt;p&gt;本文将从执行器开始，阐述Java中的线程池&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>死锁</title>
      <link>https://wangy325.top/post/tech/java/%E6%AD%BB%E9%94%81/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E6%AD%BB%E9%94%81/</guid>
      <description>&lt;p&gt;Java有能力使任务为等待某些条件成立而进入阻塞状态，所以就有可能出现这样一种情况：某个任务在等待另一个任务，而后者又在等待其他的任务，这样一直等待下去，直到等待链上的最后一个任务又在等待第一个任务释放锁，这样就出现了任务之间相互等待的连续循环现象，这种情况出现之后，没有哪个任务能够执行，于是 &lt;strong&gt;死锁&lt;/strong&gt; 出现&lt;/p&gt;

&lt;p&gt;死锁之所以难以规避，其重要的原因就在于其不确定性，可能程序运行良好，但是有潜在的死锁风险，这个风险在某些域的初始条件变化时，变得特别大，导致程序很快死锁。同时，死锁的出现也很难复现，它就像埋在程序里的地雷&lt;/p&gt;

&lt;p&gt;我们不妨回顾在&lt;a href=&#34;../资源访问受限/#2-1-span-id-condition-条件-span&#34;&gt;转账问题&lt;/a&gt;中使用的等待条件——如账户余额不足时使任务等待，在余额足够的时候再进行转账。这个程序没有问题，因为有100个账户每个账户初始金额1000元，而转账金额&lt;strong&gt;不大于&lt;/strong&gt;初始金额，所以任一时刻都会有账户的金额满足转账条件。但是如果去除转账金额不大于1000的限制，死锁就会发生，这很容易理解&lt;/p&gt;

&lt;p&gt;比如有2个账户&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;账户1 余额200元
账户2 余额300元&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;账户1向账户2转账300元，余额不足，等待；账户2向账户1转账400，余额不足等待；程序就进入死锁&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java内存模型与volatile关键字(转)</title>
      <link>https://wangy325.top/post/tech/java/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>&lt;p&gt;本文转自&lt;a href=&#34;http://www.cnblogs.com/dolphin0520/p/3920373.html&#34;&gt;Matrix海子&lt;/a&gt;，是描述&lt;code&gt;volatile&lt;/code&gt;关键字非常好的一篇文章，从Java的内存模型开始，归本溯源的阐述了&lt;code&gt;volatile&lt;/code&gt;关键字在并发中的作用与局限&lt;/p&gt;

&lt;p&gt;此文部分内容参照了《深入理解Java虚拟机》&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>生产者-消费者与阻塞队列</title>
      <link>https://wangy325.top/post/tech/java/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;在讨论线程协作的时候，已经讨论了生产者与消费者雏形，比如录音是生产者，而播放则是消费者；同样的，在汽车打蜡的模型中，打蜡可看作生产者，抛光可看作消费者；只是它们的关系是简单的生产-消费关系&lt;/p&gt;

&lt;p&gt;除了简单的线程协同之外，Java提供了&lt;strong&gt;同步队列&lt;/strong&gt;来解决线程的协同问题，本节重点讨论这部分的内容&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>终结任务</title>
      <link>https://wangy325.top/post/tech/java/%E7%BB%88%E7%BB%93%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E7%BB%88%E7%BB%93%E4%BB%BB%E5%8A%A1/</guid>
      <description>&lt;p&gt;一般地，如果程序运行良好，任务执行完所需操作后自然结束，任务终结&lt;/p&gt;

&lt;p&gt;如果任务执行时出现异常，任务也会终结&lt;/p&gt;

&lt;p&gt;在设计多个线程协同工作的任务时，需要判断任务终结的条件，以便合适地终结任务，这点尤为重要&lt;/p&gt;

&lt;p&gt;在本节中主要讨论在多线程协同工作的情况下，如何合适的终结任务&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>获取任务的返回值</title>
      <link>https://wangy325.top/post/tech/java/%E8%8E%B7%E5%8F%96%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E8%8E%B7%E5%8F%96%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</guid>
      <description>&lt;p&gt;要创建一个任务，通常实现Runnable接口。考虑一个经典的问题：用多线程分段计算0-100的加和，我们需要把每个线程计算的值汇总，然后再求和，那么应该怎样获取每个任务返回值呢？&lt;/p&gt;

&lt;p&gt;Java提供了Callable和Future接口，使任务有提供返回值的能力&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HashMap的源码分析（一）</title>
      <link>https://wangy325.top/post/tech/java/hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/</guid>
      <description>&lt;p&gt;本文内容简单分析了JDK8中HashMap源码的几个重要方法，便于理解散列表在Java集合框架中的具体应用。&lt;/p&gt;

&lt;p&gt;HashMap基于散列表，散列表中每一个Node节点（桶）是链表，当两个条目（entry）的key的hash值对桶数（capacity）取模的值相等时，这两个entry会存储在同一个链表中。但当链表中元素达到一定数目时，链表结构会转变为&lt;strong&gt;树结构&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;此文中没有讨论HashMap中涉及到树结构的源码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>资源访问受限</title>
      <link>https://wangy325.top/post/tech/java/%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90/</guid>
      <description>&lt;p&gt;在系列一中，虽然创建了多线程，并且线程之间出现了一些&lt;strong&gt;不可预测&lt;/strong&gt;的CPU调度，但是由于线程之间是&lt;strong&gt;相互隔离&lt;/strong&gt;的——&lt;strong&gt;线程没有访问共同的资源&lt;/strong&gt;，尽管在执行任务的过程可能被CPU剥夺运行权，但是当它们再次获得运行权时对运行结果并没有影响，它们是安全的&lt;/p&gt;

&lt;p&gt;考虑一种情况，如果&lt;strong&gt;多个线程访问同一个资源&lt;/strong&gt;，并对资源内容进行修改，会发生什么情况？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线程与任务</title>
      <link>https://wangy325.top/post/tech/java/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;p&gt;并发是生产过程不可能绕过去的坎，&lt;del&gt;要编写高性能的程序，必须使用并发&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;并发的本质是多个线程同时处理任务&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，不同于进程，线程之间的资源是共享的，当程序不够严谨时，使用多线程就可能带来问题，这是要反复讨论并发的原因之一&lt;/p&gt;

&lt;p&gt;在Java中，必须明白一点：线程由Thread类启动，但Thread类并不执行任何操作，&lt;strong&gt;它只是驱动赋予它的任务&lt;/strong&gt;。因此将&lt;strong&gt;线程与任务&lt;/strong&gt;的概念区分开，有利于理解并发&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Collections工具</title>
      <link>https://wangy325.top/post/tech/java/collections/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/collections/</guid>
      <description>&lt;p&gt;集合框架中一个重要的类，其实是Collection接口的&lt;strong&gt;伴随类&lt;/strong&gt;，其中定义了许多实用方法，用来获取&lt;strong&gt;集合视图&lt;/strong&gt;，或提供一些方便的操作集合元素的&lt;strong&gt;算法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于视图是直接封装的Collection接口，&lt;strong&gt;因此其方法有些局限&lt;/strong&gt;，并且由于特殊的设计，部分操作是不允许的（会抛出 &lt;em&gt;UnsupportedOperationExceptin&lt;/em&gt; ）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Map</title>
      <link>https://wangy325.top/post/tech/java/map/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/map/</guid>
      <description>&lt;p&gt;Map即映射，即键-值对，键不允许重复，并且一个键最多映射一个值&lt;/p&gt;

&lt;p&gt;映射提供3种&lt;strong&gt;集合视图&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;键集 （Set实现）&lt;/li&gt;
&lt;li&gt;值集 （Collection实现）&lt;/li&gt;
&lt;li&gt;Map.Entry集（Set实现）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于Map的键是Set，因此使用可变对象作为Map的key时，&lt;strong&gt;需要覆盖 &lt;em&gt;equals&lt;/em&gt; 和 &lt;em&gt;hashCode&lt;/em&gt; 方法&lt;/strong&gt;，&lt;strong&gt;Map不能使用自身作为key&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Java 8对Map接口进行了优化，新增了主要是针对&lt;strong&gt;函数式接口&lt;/strong&gt;的 &lt;em&gt;默认&lt;/em&gt; 方法（方法体被省略）：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;default V &lt;strong&gt;&lt;em&gt;merge&lt;/em&gt;&lt;/strong&gt;(K key, V value,
          BiFunction&amp;lt;? super V, ? super V, ? extends V&amp;gt; remappingFunction) {&amp;hellip;}&lt;/li&gt;
&lt;li&gt;default V &lt;strong&gt;&lt;em&gt;compute&lt;/em&gt;&lt;/strong&gt;(K key,
          BiFunction&amp;lt;? super K, ? super V, ? extends V&amp;gt; remappingFunction) {&amp;hellip;}&lt;/li&gt;
&lt;li&gt;default V &lt;strong&gt;&lt;em&gt;computeIfPresent&lt;/em&gt;&lt;/strong&gt;(K key,
          BiFunction&amp;lt;? super K, ? super V, ? extends V&amp;gt; remappingFunction) {&amp;hellip;}&lt;/li&gt;
&lt;li&gt;default V &lt;strong&gt;&lt;em&gt;computeIfAbsent&lt;/em&gt;&lt;/strong&gt;(K key,
          Function&amp;lt;? super K, ? extends V&amp;gt; mappingFunction) {&amp;hellip;}&lt;/li&gt;
&lt;li&gt;default V &lt;strong&gt;&lt;em&gt;replace&lt;/em&gt;&lt;/strong&gt;(K key, V value) {&amp;hellip;}&lt;/li&gt;
&lt;li&gt;default boolean &lt;strong&gt;&lt;em&gt;replace&lt;/em&gt;&lt;/strong&gt;(K key, V oldValue, V newValue) {&amp;hellip;}&lt;/li&gt;
&lt;li&gt;default boolean &lt;strong&gt;&lt;em&gt;remove&lt;/em&gt;&lt;/strong&gt;(Object key, Object value) {&amp;hellip;}&lt;/li&gt;
&lt;li&gt;default V &lt;strong&gt;&lt;em&gt;putIfAbsent&lt;/em&gt;&lt;/strong&gt;(K key, V value) {&amp;hellip;}&lt;/li&gt;
&lt;li&gt;default void &lt;strong&gt;&lt;em&gt;replaceAll&lt;/em&gt;&lt;/strong&gt;(BiFunction&amp;lt;? super K, ? super V, ? extends V&amp;gt; function) {&amp;hellip;}&lt;/li&gt;
&lt;li&gt;default V &lt;strong&gt;&lt;em&gt;getOrDefault&lt;/em&gt;&lt;/strong&gt;(Object key, V defaultValue) {&amp;hellip;}&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;上述方法使用的不多，主要用来对Map键值进行更新，按需查阅API文档&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Set</title>
      <link>https://wangy325.top/post/tech/java/set/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/set/</guid>
      <description>&lt;p&gt;Set是&lt;strong&gt;不含重复元素的集&lt;/strong&gt;，严格来讲，Set不允许当&lt;code&gt;e1.equals(e2)&lt;/code&gt;为真时， &lt;em&gt;e1&lt;/em&gt; 和 &lt;em&gt;e2&lt;/em&gt; 同时出现在集合中。Set最多允许一个&lt;code&gt;null&lt;/code&gt;元素&lt;/p&gt;

&lt;p&gt;将&lt;strong&gt;可变对象&lt;/strong&gt;置入Set时需要特别小心，当对象的改动影响到了元素之间的&lt;code&gt;equals()&lt;/code&gt;比较的结果，那么Set的行为就变得不确定了。因此，&lt;strong&gt;不能将Set本身作为Set的元素&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Queue</title>
      <link>https://wangy325.top/post/tech/java/queue/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/queue/</guid>
      <description>&lt;p&gt;Queue（队列），实际开发过程中，在单线程环境下使用的情况下不多，Queue作为集合框架中重要组成似乎习惯性被忽略，队列总是先持有元素，再处理元素&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wangy325.top/img/Queue.png&#34; alt=&#34;J7NBrQ.png&#34; /&gt;&lt;/p&gt;

&lt;p style=&#34;text-align:center;font-size:.9rem;font-style:italic&#34;&gt;Queue继承关系简图&lt;/p&gt;

&lt;p&gt;除了Collection定义的操作之外，Queue定义了额外的插入/删除/检查元素的操作，这些操作有2种形式：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;em&gt;Throws Exception&lt;/em&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;em&gt;Returns special value&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Insert&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;add(e)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;offer(e)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Remove&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;remove()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;poll()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Examine&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;element()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;peek()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如表所示，add/remove/element方法失败后抛出异常。offer/poll/peek方法失败后返回一个特殊值（null或false，视具体操作不同），需要说明的是，&lt;code&gt;offer()&lt;/code&gt;方法主要是为&lt;strong&gt;有容量限制的队列&lt;/strong&gt;设计的&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>