<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Endless River</title>
    <link>https://wangy325.top/post/</link>
    <description>Recent content in Posts on Endless River</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wangy325.top/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql锁的简单使用</title>
      <link>https://wangy325.top/post/tech/java/sql/%E4%BD%BF%E7%94%A8mysql%E7%9A%84%E8%A1%8C%E9%94%81/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/sql/%E4%BD%BF%E7%94%A8mysql%E7%9A%84%E8%A1%8C%E9%94%81/</guid>
      <description>&lt;p&gt;对于MySQL数据库而言，事务的隔离级别在不同程度上保证了数据一致性。这能够满足大部分的业务需求，但是，仍然有那么一小戳事情，仅仅依靠事务不能完美解决。&lt;/p&gt;

&lt;p&gt;我们知道，事务能读取到事务开始前就存在的数据，如果事务A需要对某条数据data1进行修改，在事务A还没有提交之前，事务B虽然不能读取到事务A对data1的修改（read committed隔离级别以上），但是能够读取data1原始的数据快照，并且能够再读取到的数据基础上对其进行修改（在事务A提交之后）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;试想，如果是商品库存数据或者其他业务敏感数据，这可能导致什么后果？&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>一次服务器oom故障</title>
      <link>https://wangy325.top/post/tech/server/2021-02-20_%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%85%E9%9A%9C/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/server/2021-02-20_%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%85%E9%9A%9C/</guid>
      <description>&lt;h2 id=&#34;1-起因&#34;&gt;1 起因&lt;/h2&gt;

&lt;p&gt;使用idm下载y2b视频导致服务器内存溢出，内核强制关闭了服务进程。&lt;/p&gt;

&lt;h2 id=&#34;2-日志&#34;&gt;2 日志&lt;/h2&gt;

&lt;p&gt;系统服务日志地址： &lt;code&gt;/var/log/messages&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;Feb 19 16:02:12 vultr kernel: oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=/,mems_allowed=0,global_oom,task_memcg=/,task=firewalld,pid=1626,uid=0
Feb 19 16:02:12 vultr kernel: Out of memory: Killed process 1626 (firewalld) total-vm:358420kB, anon-rss:22096kB, file-rss:4kB, shmem-rss:0kB
Feb 19 16:02:12 vultr kernel: oom_reaper: reaped process 1626 (firewalld), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB
Feb 19 16:02:12 vultr systemd: firewalld.service: main process exited, code=killed, status=9/KILL
Feb 19 16:02:12 vultr systemd: Unit firewalld.service entered failed state.
Feb 19 16:02:12 vultr systemd: firewalld.service failed.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;日志说明的很清楚了，&lt;strong&gt;内存溢出&lt;/strong&gt;，系统杀掉了部分进程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在SpringBoot中使用MessageSource</title>
      <link>https://wangy325.top/post/tech/java/spring/use-springboot-messagesource/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/spring/use-springboot-messagesource/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;span id=&#34;hook&#34;&gt;几个说明&lt;/span&gt;：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;del&gt;properties配置文件中，&lt;code&gt;spring.messages.basename&lt;/code&gt;&lt;strong&gt;必须&lt;/strong&gt;要加classpath前缀。如 &lt;code&gt;spring.messages.basename=classpath:i18n/messages&lt;/code&gt;&lt;/del&gt;；&lt;/li&gt;
&lt;li&gt;&lt;del&gt;必须要手动配置&lt;code&gt;MessageSource&lt;/code&gt;，springboot不会自动配置之&lt;/del&gt;；&lt;/li&gt;
&lt;li&gt;如果使用&lt;code&gt;MessageSource.getMessage()&lt;/code&gt;方法，第一个参数的引用形式为&lt;code&gt;&amp;quot;code&amp;quot;&lt;/code&gt;，而不是&lt;code&gt;&amp;quot;{code}&amp;quot;&lt;/code&gt;或者&lt;code&gt;&amp;quot;${code}&amp;quot;&lt;/code&gt;。如messageSource.getMessage(&amp;ldquo;test.msg&amp;rdquo;, null, &lt;del&gt;Locale.getDefault()&lt;/del&gt;)；&lt;/li&gt;
&lt;li&gt;在配置&lt;code&gt;LocalValidatorFactoryBean&lt;/code&gt;之后，才可以在&lt;code&gt;javax.validation.constraints&lt;/code&gt;包下的注解（&lt;code&gt;@Size&lt;/code&gt;，&lt;code&gt;@NotNull&lt;/code&gt;&amp;hellip;）下的&lt;strong&gt;&lt;em&gt;message&lt;/em&gt;&lt;/strong&gt;属性中使用&lt;code&gt;&amp;quot;{code}&amp;quot;&lt;/code&gt;的形式声明校验提示信息。如
&lt;code&gt;@NotNull(message = &amp;quot;{leftTime.not.null}&amp;quot;)&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;springMVC的locale配置和JVM的locale配置不一样，在application.properties中配置的&lt;code&gt;spring.mvc.locale=zh_CN&lt;/code&gt;实际上配置的是&lt;code&gt;WebMvcProperties&lt;/code&gt;，在获取消息时，locale信息应该使用&lt;code&gt;webMvcProperties.getLocale()&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;获取&lt;strong&gt;而不是&lt;/strong&gt;使用&lt;code&gt;Locale.getDefault()&lt;/code&gt;获取。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;1-概览&#34;&gt;1 概览&lt;/h1&gt;

&lt;p&gt;MessageSource is a powerful feature available in Spring applications. This helps application developers handle various complex scenarios with writing much extra code, such as environment-specific configuration, internationalization or configurable values.&lt;/p&gt;

&lt;p&gt;One more scenario could be modifying the default validation messages to more user-friendly/custom messages.&lt;/p&gt;

&lt;p&gt;In this tutorial, we&amp;rsquo;ll see how to configure and manage custom validation MessageSource in the application using Spring Boot.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在SpringBoot项目中使用MockMvc进行接口测试</title>
      <link>https://wangy325.top/post/tech/java/test/mockmvc%E7%94%A8%E4%BE%8B2%E5%88%99/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/test/mockmvc%E7%94%A8%E4%BE%8B2%E5%88%99/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;现在流行在项目中使用&lt;a href=&#34;swagger.io&#34;&gt;swagger&lt;/a&gt;对接口进行测试，这确实很方便、直观。&lt;/p&gt;

&lt;p&gt;但是MockMvc作为spring-test包中指定的测试框架，在没有使用swagger的项目中，使用其进行测试是很好的选择。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文简单介绍在springboot项目中使用&lt;a href=&#34;https://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt;和&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvc.html&#34;&gt;MockMvc&lt;/a&gt;对控制器进行测试。&lt;/p&gt;

&lt;h1 id=&#34;1-了解mockito&#34;&gt;1 了解Mockito&lt;/h1&gt;

&lt;p&gt;简单来说，&lt;a href=&#34;https://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt;是一个模拟创建对象的框架，利用它提供的API，可以简化单元测试工作。Mockito的API易读性是很好的，并且错误信息也很简明。&lt;code&gt;spring-boot-starter-test&lt;/code&gt;模块中引入了&lt;code&gt;mockito&lt;/code&gt;依赖，如果你使用springboot，那么就可以直接使用Mockito进行单元测试。&lt;/p&gt;

&lt;p&gt;我们从Mockito&lt;a href=&#34;https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html&#34;&gt;官方API文档&lt;/a&gt;的的引例开始，看看Mockito是如何工作的。&lt;/p&gt;

&lt;h2 id=&#34;1-1-mock一个对象&#34;&gt;1.1 mock一个对象&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt; &lt;span class=&#34;c1&#34;&gt;// 学会使用静态导入，代码会更简洁
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.mockito.Mockito.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

 &lt;span class=&#34;c1&#34;&gt;// mock List接口对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mockedList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

 &lt;span class=&#34;c1&#34;&gt;// 使用Mock的List对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mockedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;mockedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

 &lt;span class=&#34;c1&#34;&gt;// 校验某个行为是否发生过1次
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mockedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;一旦mock对象被创建，mock会记住对其的所有操作，之后，你便可以选择性的&lt;span id=&#34;v1&#34;&gt;校验&lt;/span&gt;这些操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java8中的新日期和时间工具库</title>
      <link>https://wangy325.top/post/tech/java/basic/java-new-time-api/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/basic/java-new-time-api/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;mybatis自 3.4.5 开始，已经支持使用LocaldateTime作为时间查询入参，映射类型为TimeStamp，参考地址: &lt;a href=&#34;https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers&#34;&gt;https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;1-前言&#34;&gt;1 前言&lt;/h1&gt;

&lt;p&gt;在介绍Java SE 8中新的日期时间库前，先了解下Java 8之前的日期时间工具的诟病。&lt;/p&gt;

&lt;p&gt;在Java SE 8前，日期时间工具库在&lt;code&gt;java.util&lt;/code&gt;包中，包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.util.Date&lt;/code&gt;：表示日期和时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.util.Calendar&lt;/code&gt;以及其实现子类：表示各种日历系统，常用的是格林威治日历&lt;code&gt;java.util.GregorianCalendar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.util.TimeZone&lt;/code&gt;以及其实现子类：表示时区偏移量和夏令时&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以及辅助其进行格式化和解析的工具库在java.text包中，包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.text.DateFormat&lt;/code&gt;：格式化日期时间和解析日期时间的工具抽象类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.text.SimpleDateFormat&lt;/code&gt;：DateDateFormat的实现&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>在xxl-job中使用分片任务</title>
      <link>https://wangy325.top/post/tech/java/job/xxl-sharding-job/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/job/xxl-sharding-job/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B&#34;&gt;xxl-job&lt;/a&gt;是国内开发者提供的一款轻量级分布式任务调度平台，开发者是大众点评的工程师，其目前维护一个&lt;a href=&#34;https://www.xuxueli.com/&#34;&gt;开源社区&lt;/a&gt;，里面还有很多已经发布或尚在孵化的开源项目。&lt;/p&gt;

&lt;p&gt;本文介绍在如何在xxl-job中使用创建并使用分片任务。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;任务分片&lt;/strong&gt;是一个以空间换时间的概念，旨在将耗时任务进行拆分，然后同时执行，拆分之后执行的结果对任务任务原来不分片执行的结果没有影响。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;比如要核对id从1-1000的用户的邮箱信息，找出无效的邮箱信息。可以将id分成合适的多小段，1-100，101-200，&amp;hellip;，901-1000，然后交给不同的任务去执行。这就是任务分片的简单模型。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在阅读此文之前，需要理解xxl-job的基本模型与工作流程，其核心概念有2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调度中心&lt;/p&gt;

&lt;p&gt;负责管理调度信息，按照调度配置发出调度请求，自身&lt;strong&gt;不承担&lt;/strong&gt;业务代码。调度系统与任务&lt;strong&gt;解耦&lt;/strong&gt;，提高了系统可用性和稳定性，同时调度系统性能不再受限于任务模块；&lt;/p&gt;

&lt;p&gt;支持可视化、简单且动态的管理调度信息，包括任务新建，更新，删除，GLUE开发和任务报警等，所有上述操作都会&lt;strong&gt;实时生效&lt;/strong&gt;，同时支持监控调度结果以及执行日志，支持执行器Failover。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;执行器&lt;/p&gt;

&lt;p&gt;负责接收调度请求并执行任务逻辑。任务模块专注于任务的执行等操作，开发和维护更加简单和高效；接收“调度中心”的&lt;strong&gt;执行请求、终止请求和日志请求&lt;/strong&gt;等。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;调度中心&lt;strong&gt;自动发现并注册&lt;/strong&gt;执行器，并且通过执行器提供的api对任务进行调度（执行/终止等操作）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2020年度总结</title>
      <link>https://wangy325.top/post/chaos/annual-summary-2020/</link>
      <pubDate>Thu, 31 Dec 2020 20:57:00 +0800</pubDate>
      
      <guid>https://wangy325.top/post/chaos/annual-summary-2020/</guid>
      <description>2020，无论于全球，中国，以及每一个人，都是残酷的。疫情的肆虐带走了人们的牵挂，带来了新的危机。我，作为一个处于危机边缘而不自觉的人，果不</description>
    </item>
    
    <item>
      <title>How to Use printf in Java (转)</title>
      <link>https://wangy325.top/post/tech/java/trans/how2use-printf/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/trans/how2use-printf/</guid>
      <description>&lt;h1 id=&#34;1-introduction&#34;&gt;1 Introduction&lt;/h1&gt;

&lt;p&gt;In this tutorial, we&amp;rsquo;ll demonstrate different examples of formatting with the printf() method.&lt;/p&gt;

&lt;p&gt;The method is part of the java.io.PrintStream class and provides String formatting similar to the printf() function in C.&lt;/p&gt;

&lt;h1 id=&#34;2-syntax&#34;&gt;2 Syntax&lt;/h1&gt;

&lt;p&gt;We can use one of the following PrintStream methods to format the output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We specify the formatting rules using the format parameter. Rules start with the &lt;code&gt;%&lt;/code&gt; character.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at a quick example before we dive into the details of the various formatting rules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello %s!%n&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This produces the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;Hello World!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As shown above, the format string contains plain text and two formatting rules. The first rule is used to format the string argument. The second rule adds a newline character to the end of the string.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>背包问题</title>
      <link>https://wangy325.top/post/tech/algo/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/algo/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;背包问题其实属于&lt;strong&gt;动态规划&lt;/strong&gt;（ &lt;em&gt;Dynamic Programming&lt;/em&gt; ）问题的一种。动态规划的手段是将大问题拆解为多个小问题，小问题解决之后，大问题也就随之而解。&lt;/p&gt;

&lt;p&gt;背包问题的典型描述是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;给定n种物品和一背包。物品 i 的重量似乎 wi，其价值为 vi，背包的容量为 c。问应该如何选择装入背包中的物品，
使得装入背包中物品的总价值最大？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;引例&#34;&gt;引例&lt;/h1&gt;

&lt;p&gt;为了阐述问题方便，引用算法图解一书中关于此书的图解好了(没有比这更好的解释方法了)。首先引入问题：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;假设你是一个小偷，有一个可以装下4磅东西的背包，你可以偷窃的商品有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4磅的音响，价值3000&lt;/li&gt;
&lt;li&gt;3磅的笔记本电脑，价值2000&lt;/li&gt;
&lt;li&gt;1磅的吉他，价值1500&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然，这个问题很简单，就算是遍历所有的可能性，也不过8种而已($2^3$)，不过当商品的数量增加时，可能性是指数式增长的，所以这种计算方式的运算时间复杂度是$O(2^n)$。现在尝试使用动态规划的方法来解决问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java内存区域详解(转)</title>
      <link>https://wangy325.top/post/tech/java/jvm/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/jvm/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;如果没有特殊说明，都是针对的是 HotSpot 虚拟机。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;写在前面-常见面试题&#34;&gt;写在前面 (常见面试题)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;介绍下 Java 内存区域（运行时数据区）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Java 对象的创建过程（五步，建议能默写出来并且要知道每一步虚拟机做了什么）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象的访问定位的两种方式（句柄和直接指针两种方式）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String 类和常量池&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8 种基本类型的包装类和常量池&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;一-概述&#34;&gt;一 概述&lt;/h1&gt;

&lt;p&gt;对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像 C/C++程序开发程序员这样为每一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mysql事务与隔离级别</title>
      <link>https://wangy325.top/post/tech/java/sql/mysql%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/sql/mysql%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>&lt;p&gt;mysql事务属于老生常谈的内容了，并不指望这一篇文章将其搞透，本篇文章只是将mysql事务的外衣扒了，让其看起来不再那么神秘与华丽。有时候，新手总是对“事务”这两个字怀有莫名的恐惧感，因为其藏在mysql内部，偷偷地工作着，就好像你没有凝视深渊，而深渊却在凝视你。&lt;/p&gt;

&lt;p&gt;事务的概念可以这样理解：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在mysql中，有些操作必须要分步完成，那么我们可以把这些分步完成的操作声明为一个“事务”，用来保证mysql数据一致性。
&lt;p&gt;
    对于单条sql语句而言，mysql将其处理为一个「隐式事务」。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看起来，事务的概念还是有些空泛。事实上，有了一定的并发基础后（这也是这篇文章写在java并发之后的原因），更加容易理解事务这个概念，这并不是说事务一个并发概念，不过，事务是有了并发之后才衍生的概念，这很容易理解。试想一个只容许一个客户端连接的mysql服务，是否需要“事务”呢？答案应该是否定的。单个客户端执行sql语句总是有序的，数据一致性就能得到保证了&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。试想，如果是多客户端的系统（事实上正是如此）同时执行sql语句，就好似多线程同时访问资源一样，对于数据库系统而言，所有的数据表都是共享资源&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，那么事务就像是那把保证并发安全的锁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM垃圾回收概要(转)</title>
      <link>https://wangy325.top/post/tech/java/jvm/java-gc/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/jvm/java-gc/</guid>
      <description>&lt;h1 id=&#34;本节常见面试题&#34;&gt;本节常见面试题&lt;/h1&gt;

&lt;p&gt;问题答案在文中都有提到&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何判断对象是否死亡（两种方法）。&lt;/li&gt;
&lt;li&gt;简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。&lt;/li&gt;
&lt;li&gt;如何判断一个常量是废弃常量&lt;/li&gt;
&lt;li&gt;如何判断一个类是无用的类&lt;/li&gt;
&lt;li&gt;垃圾收集有哪些算法，各自的特点？&lt;/li&gt;
&lt;li&gt;HotSpot 为什么要分为新生代和老年代？&lt;/li&gt;
&lt;li&gt;常见的垃圾回收器有哪些？&lt;/li&gt;
&lt;li&gt;介绍一下 CMS,G1 收集器。&lt;/li&gt;
&lt;li&gt;Minor Gc 和 Full GC 有什么不同呢？&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>redis必知必会(转)</title>
      <link>https://wangy325.top/post/tech/java/redis/redis-all/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/redis/redis-all/</guid>
      <description>&lt;p&gt;此文总结了redis相关的基础性知识体系，但不包括redis主从、哨兵、集群相关内容&lt;/p&gt;

&lt;h2 id=&#34;1-简单介绍一下-redis-呗&#34;&gt;1. 简单介绍一下 Redis 呗&lt;/h2&gt;

&lt;p&gt;简单来说 &lt;strong&gt;Redis 就是一个使用 C 语言开发的数据库&lt;/strong&gt;，不过与传统数据库不同的是 &lt;strong&gt;Redis 的数据是存在内存中的&lt;/strong&gt; ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。&lt;/p&gt;

&lt;p&gt;另外，&lt;strong&gt;Redis 除了做缓存之外，Redis 也经常用来做分布式锁，甚至是消息队列。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis 提供了多种数据类型来支持不同的业务场景。Redis 还支持事务 、持久化、Lua 脚本、多种集群方案。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>布隆过滤器(转)</title>
      <link>https://wangy325.top/post/tech/java/redis/bloom-filter/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/redis/bloom-filter/</guid>
      <description>&lt;p&gt;海量数据处理以及缓存穿透这两个场景让我认识了 布隆过滤器 ，我查阅了一些资料来了解它，但是很多现成资料并不满足我的需求，所以就决定自己总结一篇关于布隆过滤器的文章。希望通过这篇文章让更多人了解布隆过滤器，并且会实际去使用它！&lt;/p&gt;

&lt;p&gt;下面我们将分为几个方面来介绍布隆过滤器：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;什么是布隆过滤器？&lt;/li&gt;
&lt;li&gt;布隆过滤器的原理介绍。&lt;/li&gt;
&lt;li&gt;布隆过滤器使用场景。&lt;/li&gt;
&lt;li&gt;通过 Java 编程手动实现布隆过滤器。&lt;/li&gt;
&lt;li&gt;利用Google开源的Guava中自带的布隆过滤器。&lt;/li&gt;
&lt;li&gt;Redis 中的布隆过滤器。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-什么是布隆过滤器&#34;&gt;1.什么是布隆过滤器？&lt;/h3&gt;

&lt;p&gt;首先，我们需要了解布隆过滤器的概念。&lt;/p&gt;

&lt;p&gt;布隆过滤器（Bloom Filter）是一个叫做 Bloom 的老哥于1970年提出的。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的的 List、Map 、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>倒计时门闩、信号量、交换器及其他</title>
      <link>https://wangy325.top/post/tech/java/concurrency/%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/concurrency/%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;p&gt;Java 1.5以后的并发类库新加入了一些用于解决并发问题的新构件，合理地使用这些构件能够帮助我们写出更加简单且健壮的并发程序。本节内容介绍&lt;code&gt;java.util.concurrent&lt;/code&gt;包中一些具有代表性的构件，包括&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CountDownLatch&lt;/li&gt;
&lt;li&gt;CyclicBarrier&lt;/li&gt;
&lt;li&gt;Semaphore&lt;/li&gt;
&lt;li&gt;Exchanger&lt;/li&gt;
&lt;li&gt;DelayQueue&lt;/li&gt;
&lt;li&gt;PriorityBlockingQueue&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;1-countdownlatch&#34;&gt;1 CountDownLatch&lt;/h1&gt;

&lt;p&gt;在讨论线程的基本概念时，我们说过&lt;code&gt;join()&lt;/code&gt;方法可使当前线程等待调用join方法的线程执行完，可以实现简单的&lt;a href=&#34;../线程基础概念/#9-加入一个线程&#34;&gt;无锁同步&lt;/a&gt;，使用CountDownLatch可以更加简单的实现这一目的。毕竟，&lt;code&gt;join()&lt;/code&gt;方法的语义“加入一个线程”不是很容易就能让人理解。相较于&lt;code&gt;join()&lt;/code&gt;方法，CountDownLatch的语义就明确多了。&lt;/p&gt;

&lt;p&gt;在有些文档上，将CountDownLatch译为&amp;rdquo;倒计时门闩【shuān】&amp;rdquo;，其维护一个计数器，这个计数器在CountDownLatch初始化之后便&lt;strong&gt;不能重置&lt;/strong&gt;。在CountDownLatch上调用&lt;code&gt;countDown()&lt;/code&gt;方法来将计数值减1，调用这个方法并不会引起阻塞。不过，在这个计数器为0之前，任何调用CountDownLatch的&lt;code&gt;await()&lt;/code&gt;方法的任务都将阻塞。&lt;/p&gt;

&lt;p&gt;CountDownLatch的典型用法是将一个任务分割为n个可以独立解决的部分，并创建一个计数器值为n的CountDownLatch，在每个任务完成时，调用&lt;code&gt;countDown()&lt;/code&gt;方法将计数器减1，在等待所有任务完成的线程上调用&lt;code&gt;await()&lt;/code&gt;方法，将任务阻塞，知道计数器为0之后再继续运行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计划执行任务</title>
      <link>https://wangy325.top/post/tech/java/concurrency/%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/concurrency/%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</guid>
      <description>&lt;p&gt;除了ThreadPoolExecutor之外，Java执行器（Executor）框架还提供了可以在指定延迟之后执行一次或周期执行任务的接口&lt;code&gt;ScheduledExecutorService&lt;/code&gt;，较&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Timer.html&#34;&gt;java.util.Timer&lt;/a&gt;而言，它是更好的选择&lt;/p&gt;

&lt;p&gt;与&lt;a href=&#34;../执行器与线程池/#3-线程池&#34;&gt;线程池&lt;/a&gt;不同的是，用于计划执行的&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;使用&lt;code&gt;ScheduledFutureTask&lt;/code&gt;作为任务，使用&lt;code&gt;DelayedWorkQueue&lt;/code&gt;作为任务队列，以实现计划（周期）执行的目的&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wangy325.top/img/scheduledFutureTask.png&#34; alt=&#34;xx&#34; /&gt;
&lt;p style=&#34;text-align:center; font-size:.9rem; font-style:italic&#34;&gt;ScheduledThreadPoolExecutor继承关系图&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;从&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;的继承关系图可以看到，其是&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;的导出类，其提交任务和执行任务以及关闭线程池的逻辑应和线程池相差无几，其重点差别在于&lt;strong&gt;任务对象以及任务队列&lt;/strong&gt;的封装上，后文将会详述&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;的任务计划执行以及周期执行机制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>执行器与线程池</title>
      <link>https://wangy325.top/post/tech/java/concurrency/%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/concurrency/%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;p&gt;本系列的文章到目前为止，虽然没有特别说明，但是使用执行器(Executor(s))的次数已经难以计数了，&lt;code&gt;Executors&lt;/code&gt;提供了一些非常方便的静态方法，可以根据需要创建不同的&lt;code&gt;ExecutorService&lt;/code&gt;，然后调用其&lt;code&gt;execute(Runnable)&lt;/code&gt;或&lt;code&gt;submit(Callable&amp;lt;T&amp;gt;)&lt;/code&gt;方法。在多线程的条件下，执行器还有一个非常明显的优势，它使用线程池管理线程，避免了系统创建和销毁线程的开销。在一般的Java并发过程中，也建议使用执行器完成任务而非显式地创建线程&lt;/p&gt;

&lt;p&gt;本文将从执行器开始，阐述Java中的线程池&lt;/p&gt;

&lt;h1 id=&#34;1-executors&#34;&gt;1 Executors&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;java.util.concurrent.Executors&lt;/code&gt;类提供了许多静态方法来获取不同类型的 &lt;strong&gt;线程池&lt;/strong&gt;，下表列出其常用方法&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newFixedThreadPool&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;创建固定大小的线程池，线程会一直保留&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newCachedThreadPool&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;创建线程池，该线程池在必要时创建新线程，旧线程也会被重用，线程空闲60s被销毁&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newSingleThreadExecutor&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;相当于newFixedThreadPool(1)，其能保证任务顺序执行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newScheduledThreadPool&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于预定执行一次或周期执行的线程池&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newSingleThreadScheduledExecutor&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于预定执行一次或周期执行的单线程池&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p style=&#34;text-align:center; font-size:.9rem; font-style:italic&#34;&gt;Executors用于构造线程池的部分方法&lt;/p&gt;

&lt;p&gt;上表中的前3个方法返回&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;实例，后面2个方法返回&lt;code&gt;ScheduledExecutorService&lt;/code&gt;接口的实例，不管是ThreadPoolExecutor或是ScheduledExecutorService，都是&lt;code&gt;ExecutorService&lt;/code&gt;的实现，&lt;code&gt;ExecutorService&lt;/code&gt;接口是设计用来处理任务的接口，其顶层接口是&lt;code&gt;java.util.concurrent.Executor&lt;/code&gt;，该接口简单地定义了一个执行任务的方法：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>死锁</title>
      <link>https://wangy325.top/post/tech/java/concurrency/%E6%AD%BB%E9%94%81/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/concurrency/%E6%AD%BB%E9%94%81/</guid>
      <description>&lt;p&gt;Java有能力使任务为等待某些条件成立而进入阻塞状态，所以就有可能出现这样一种情况：某个任务在等待另一个任务，而后者又在等待其他的任务，这样一直等待下去，直到等待链上的最后一个任务又在等待第一个任务释放锁，这样就出现了任务之间相互等待的连续循环现象，这种情况出现之后，没有哪个任务能够执行，于是 &lt;strong&gt;死锁&lt;/strong&gt; 出现&lt;/p&gt;

&lt;p&gt;死锁之所以难以规避，其重要的原因就在于其不确定性，可能程序运行良好，但是有潜在的死锁风险，这个风险在某些域的初始条件变化时，变得特别大，导致程序很快死锁。同时，死锁的出现也很难复现，它就像埋在程序里的地雷&lt;/p&gt;

&lt;p&gt;我们不妨回顾在&lt;a href=&#34;../资源访问受限/#2-1-span-id-condition-条件-span&#34;&gt;转账问题&lt;/a&gt;中使用的等待条件——如账户余额不足时使任务等待，在余额足够的时候再进行转账。这个程序没有问题，因为有100个账户每个账户初始金额1000元，而转账金额&lt;strong&gt;不大于&lt;/strong&gt;初始金额，所以任一时刻都会有账户的金额满足转账条件。但是如果去除转账金额不大于1000的限制，死锁就会发生，这很容易理解&lt;/p&gt;

&lt;p&gt;比如有2个账户&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;账户1 余额200元
账户2 余额300元&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;账户1向账户2转账300元，余额不足，等待；账户2向账户1转账400，余额不足等待；程序就进入死锁&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java内存模型与volatile关键字(转)</title>
      <link>https://wangy325.top/post/tech/java/concurrency/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/concurrency/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>&lt;p&gt;本文转自&lt;a href=&#34;http://www.cnblogs.com/dolphin0520/p/3920373.html&#34;&gt;Matrix海子&lt;/a&gt;，是描述&lt;code&gt;volatile&lt;/code&gt;关键字非常好的一篇文章，从Java的内存模型开始，归本溯源的阐述了&lt;code&gt;volatile&lt;/code&gt;关键字在并发中的作用与局限&lt;/p&gt;

&lt;p&gt;此文部分内容参照了《深入理解Java虚拟机》&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>生产者-消费者与阻塞队列</title>
      <link>https://wangy325.top/post/tech/java/concurrency/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/concurrency/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;在讨论线程协作的时候，已经讨论了生产者与消费者雏形，比如录音是生产者，而播放则是消费者；同样的，在汽车打蜡的模型中，打蜡可看作生产者，抛光可看作消费者；只是它们的关系是简单的生产-消费关系&lt;/p&gt;

&lt;p&gt;除了简单的线程协同之外，Java提供了&lt;strong&gt;同步队列&lt;/strong&gt;来解决线程的协同问题，本节重点讨论这部分的内容&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>