<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>方法绑定 on Endless River</title>
    <link>https://wangy325.top/tags/%E6%96%B9%E6%B3%95%E7%BB%91%E5%AE%9A/</link>
    <description>Recent content in 方法绑定 on Endless River</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 18 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wangy325.top/tags/%E6%96%B9%E6%B3%95%E7%BB%91%E5%AE%9A/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>动态绑定与静态绑定</title>
      <link>https://wangy325.top/post/tech/java/basic/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/basic/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/</guid>
      <description>&lt;p&gt;这是Java方法调用的2个术语，用来描述Java虚拟机方法调用的2种机制&lt;/p&gt;

&lt;h2 id=&#34;6-1-span-id-m10-动态绑定-span&#34;&gt;6.1 &lt;span id = &#34;m10&#34;&gt;动态绑定&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;方法的&lt;strong&gt;名字&lt;/strong&gt;和&lt;strong&gt;参数列表&lt;/strong&gt;构成了方法的签名&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;返回类型并不是方法签名的一部分，因此在覆盖方法时，允许将导出类的方法返回类型定义为基类返回类型的子类型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;方法调用时，虚拟机为每个类创建一个&lt;strong&gt;方法表&lt;/strong&gt;，列出所有的方法签名和实际调用的方法，调用方法时按表查找即可，例如方法表可能是这样的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;FinalMethod:
	f() -&amp;gt; FinalMethod.f();
	g() -&amp;gt; FinalMethod.g();
	p() -&amp;gt; FinalMethod.p();
	// skip Object method...
FinalMethodExt
	f() -&amp;gt; FinalMethodExt.f();
	p() -&amp;gt; FinalMethodExt.p();
	// skip Object method...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;当对象引用&lt;code&gt;o&lt;/code&gt;调用方法时，其过程可归纳为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;虚拟机提取&lt;code&gt;o&lt;/code&gt;的&lt;strong&gt;实际类型&lt;/strong&gt;的方法表&lt;/li&gt;
&lt;li&gt;在方法表中搜索调用的方法，若有满足，则直接调用&lt;/li&gt;
&lt;li&gt;若无满足，则在&lt;code&gt;o&lt;/code&gt;实际类型的父类中搜索调用的方法&lt;/li&gt;
&lt;li&gt;调用方法或抛出异常&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从上面的描述可以看出，继承体系中的方法调用可能出现不同的结果（导出类覆盖和未覆盖基类方法时的差异现象）&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>