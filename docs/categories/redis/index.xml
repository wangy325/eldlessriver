<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on Endless River</title>
    <link>https://wangy325.top/categories/redis/</link>
    <description>Recent content in redis on Endless River</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 24 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wangy325.top/categories/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>redis必知必会(转)</title>
      <link>https://wangy325.top/post/tech/java/redis/redis-all/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/redis/redis-all/</guid>
      <description>&lt;p&gt;此文总结了redis相关的基础性知识体系，但不包括redis主从、哨兵、集群相关内容&lt;/p&gt;

&lt;h2 id=&#34;1-简单介绍一下-redis-呗&#34;&gt;1. 简单介绍一下 Redis 呗&lt;/h2&gt;

&lt;p&gt;简单来说 &lt;strong&gt;Redis 就是一个使用 C 语言开发的数据库&lt;/strong&gt;，不过与传统数据库不同的是 &lt;strong&gt;Redis 的数据是存在内存中的&lt;/strong&gt; ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。&lt;/p&gt;

&lt;p&gt;另外，&lt;strong&gt;Redis 除了做缓存之外，Redis 也经常用来做分布式锁，甚至是消息队列。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis 提供了多种数据类型来支持不同的业务场景。Redis 还支持事务 、持久化、Lua 脚本、多种集群方案。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>布隆过滤器(转)</title>
      <link>https://wangy325.top/post/tech/java/redis/bloom-filter/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/redis/bloom-filter/</guid>
      <description>&lt;p&gt;海量数据处理以及缓存穿透这两个场景让我认识了 布隆过滤器 ，我查阅了一些资料来了解它，但是很多现成资料并不满足我的需求，所以就决定自己总结一篇关于布隆过滤器的文章。希望通过这篇文章让更多人了解布隆过滤器，并且会实际去使用它！&lt;/p&gt;

&lt;p&gt;下面我们将分为几个方面来介绍布隆过滤器：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;什么是布隆过滤器？&lt;/li&gt;
&lt;li&gt;布隆过滤器的原理介绍。&lt;/li&gt;
&lt;li&gt;布隆过滤器使用场景。&lt;/li&gt;
&lt;li&gt;通过 Java 编程手动实现布隆过滤器。&lt;/li&gt;
&lt;li&gt;利用Google开源的Guava中自带的布隆过滤器。&lt;/li&gt;
&lt;li&gt;Redis 中的布隆过滤器。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-什么是布隆过滤器&#34;&gt;1.什么是布隆过滤器？&lt;/h3&gt;

&lt;p&gt;首先，我们需要了解布隆过滤器的概念。&lt;/p&gt;

&lt;p&gt;布隆过滤器（Bloom Filter）是一个叫做 Bloom 的老哥于1970年提出的。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的的 List、Map 、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis Sentinel高可用实现</title>
      <link>https://wangy325.top/post/tech/java/redis/build-redis-sentinel/</link>
      <pubDate>Wed, 14 Aug 2019 16:01:23 +0800</pubDate>
      
      <guid>https://wangy325.top/post/tech/java/redis/build-redis-sentinel/</guid>
      <description>&lt;p&gt;Redis &lt;a href=&#34;https://raw.githubusercontent.com/antirez/redis/2.8/00-RELEASENOTES&#34;&gt;v2.8&lt;/a&gt; 之后提供了高可用实现&lt;code&gt;Redis Sentinel&lt;/code&gt;，实现了&lt;strong&gt;主从复制&lt;/strong&gt;以及&lt;del&gt;被动&lt;/del&gt;&lt;strong&gt;主备切换&lt;/strong&gt;。&lt;a href=&#34;https://raw.githubusercontent.com/antirez/redis/3.0/00-RELEASENOTES&#34;&gt;v3.0&lt;/a&gt; 之后提供了分布式实现&lt;code&gt;Redis Cluster&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;本文讨论的是使用Sentinel搭建Redis高可用服务。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If all redis and sentinel instances were deployed in same host, you just build a fake redis-sentinel &lt;em&gt;High-Availability&lt;/em&gt; environment&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:v1&#34;&gt;&lt;a href=&#34;#fn:v1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;1-准备&#34;&gt;1 准备&lt;/h1&gt;

&lt;h2 id=&#34;1-1-linux主机&#34;&gt;1.1 linux主机&lt;/h2&gt;

&lt;p&gt;本文使用centOS7，需安装gcc：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yum install gcc
&lt;span class=&#34;c1&#34;&gt;# or on ubuntu&lt;/span&gt;
apt-get install gcc&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>